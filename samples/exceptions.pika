begin
    function foo()
        raise Error.new("foo failed")   
    finally
        # Functions can have a finalizer    
        print "finally: exiting foo"
    end

    function bar(stringerror)
        raise "string error" when stringerror
        raise Error.new("bar failed")
    finally
        print "finally: exiting bar"
    end
        
    try
        print "try #1: foo()"
        foo()
    catch e
        print "caught #1: " @ e.type @@ e
    # Try/catch blocks can have a finalizer.
    finally
        print "finally: exiting handler #1"
    end
    
    try
        stringerror = true # Change to false to use the second catch block.
        print "try #2: bar()"
        bar(stringerror)    
    catch estr is String
        print "caught #2a: " @ estr.type @@ estr
    catch e
        print "caught #2b: " @ e.type @@ e
    finally
        print "finally: exiting handler #2"
    end
    
finally 
    # begin blocks, loops and other blocks, can have a finalizer.
    print "finally: exiting begin block"
end
